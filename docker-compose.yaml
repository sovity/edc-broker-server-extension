version: "3.8"
services:
  broker-ui:
    image: ${EDC_UI_IMAGE}
    ports:
      - '11000:80'
    environment:
      - EDC_UI_ACTIVE_PROFILE=broker
      - EDC_UI_DATA_MANAGEMENT_API_URL=http://localhost:11002/backend/api/v1/management
      - EDC_UI_DATA_MANAGEMENT_API_KEY=ApiKeyDefaultValue
      - EDC_BROKER_SERVER_KNOWN_CONNECTORS=http://connector:11003/api/v1/ids/data
  broker:
    image: ${BROKER_IMAGE}
    depends_on:
      - broker-postgresql
      - connector
    environment:
      # Data Management API Key
      EDC_API_AUTH_KEY: ApiKeyDefaultValue

      # Deployment Configuration
      EDC_BROKER_SERVER_KNOWN_CONNECTORS: "http://connector:11003/api/v1/ids/data"
      MY_EDC_FQDN: "broker"
      MY_EDC_JDBC_URL: jdbc:postgresql://broker-postgresql:5432/edc
      MY_EDC_JDBC_USER: edc
      MY_EDC_JDBC_PASSWORD: edc

      # Local Dev / Docker-Compose Config
      MY_EDC_PROTOCOL: "http://" # We don't have TLS in the docker container
      MY_EDC_IDS_BASE_URL: "http://broker:11003" # We have no reverse proxy removing ports in the docker compose
      EDC_WEB_REST_CORS_ENABLED: 'true'
      EDC_WEB_REST_CORS_HEADERS: 'origin,content-type,accept,authorization,x-api-key'
      EDC_WEB_REST_CORS_ORIGINS: '*'

      # Update connectors every 20s in dev
      EDC_BROKER_SERVER_CRON_CONNECTOR_REFRESH: "*/20 * * ? * *"
      # No parallelism in dev
      EDC_BROKER_SERVER_NUM_THREADS: "1"
      # Hide offline data offers after 1 minute in dev
      EDC_BROKER_SERVER_HIDE_OFFLINE_DATA_OFFERS_AFTER: "PT1M"
    ports:
      - '11001:11001'
      - '11002:11002'
      - '11003:11003'
      - '11004:11004'
      - '11005:5005'
  broker-postgresql:
    image: docker.io/bitnami/postgresql:15
    restart: always
    environment:
      POSTGRESQL_USERNAME: edc
      POSTGRESQL_PASSWORD: edc
      POSTGRESQL_DATABASE: edc
    volumes:
      - 'broker-postgresql:/bitnami/postgresql'

  connector-ui:
    image: ${EDC_UI_IMAGE}
    ports:
      - '22000:80'
    environment:
      - EDC_UI_ACTIVE_PROFILE=mds-open-source
      - EDC_UI_CONFIG_URL=edc-ui-config
      - EDC_UI_DATA_MANAGEMENT_API_URL=http://localhost:22002/api/v1/management
      - EDC_UI_DATA_MANAGEMENT_API_KEY=ApiKeyDefaultValue
  connector:
    image: ${EDC_CE_IMAGE}
    depends_on:
      - connector-postgresql
    environment:
      MY_EDC_NAME_KEBAB_CASE: "example-connector"
      MY_EDC_TITLE: "EDC Connector"
      MY_EDC_DESCRIPTION: "MDS Community Edition EDC Connector"
      MY_EDC_CURATOR_URL: "https://example.com"
      MY_EDC_CURATOR_NAME: "Example GmbH"
      MY_EDC_MAINTAINER_URL: "https://sovity.de"
      MY_EDC_MAINTAINER_NAME: "sovity GmbH"

      # Data Management API Key
      EDC_API_AUTH_KEY: ApiKeyDefaultValue

      MY_EDC_PROTOCOL: "http://"
      MY_EDC_FQDN: "connector"
      MY_EDC_IDS_BASE_URL: "http://connector:11003"

      MY_EDC_JDBC_URL: jdbc:postgresql://connector-postgresql:5432/edc
      MY_EDC_JDBC_USER: edc
      MY_EDC_JDBC_PASSWORD: edc

      EDC_WEB_REST_CORS_ENABLED: 'true'
      EDC_WEB_REST_CORS_HEADERS: 'origin,content-type,accept,authorization,x-api-key'
      EDC_WEB_REST_CORS_ORIGINS: '*'
    ports:
      - '22001:11001'
      - '22002:11002'
      - '22003:11003'
      - '22004:11004'
      - '22005:5005'
    volumes:
      - ./docs/getting-started/secrets:/secrets
  connector-postgresql:
    image: docker.io/bitnami/postgresql:15
    restart: always
    environment:
      POSTGRESQL_USERNAME: edc
      POSTGRESQL_PASSWORD: edc
      POSTGRESQL_DATABASE: edc
    ports:
      - '54322:5432'
    volumes:
      - 'connector-postgresql:/bitnami/postgresql'

volumes:
  broker-postgresql:
    driver: local
  connector-postgresql:
    driver: local
